% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 15-Apr-2020 20:11:51
%
% This script assumes these variables are defined: (first run preprocess.m)
%
%   input - input data.
%   target_norm - target data.

x = input;
t = target_norm;

% Choose a Training Function
% For a list of all training functions type: help nntrain
trainFcn = 'traingdx';  % Gradient descent with momentum and adaptive learning rate backpropagation

% Create a Fitting Network
hiddenLayerSize = 10;
net = feedforwardnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing (80% 5%  15%)
k=5;
samples=943;
cvFolds=crossvalind('KFold',samples,k); %Create folds for CV
perf=[];
epoch=[];
for i=1:5
        testIdx = (cvFolds == i);
        trainIdx = ~testIdx;
        trInd=find(trainIdx);
        tstInd=find(testIdx);
        %For validation set (5%) / Comment out for no val set
        valInd=zeros((round(length(tstInd)/4)-1),1);
        for j=1:length(valInd)
            valInd(j)=tstInd(j);
            tstInd(j)=[];
        end
        
        net.trainParam.epochs = 100;
        net.trainParam.lr=0.1;
        net.trainParam.mc=0.6;
        net.divideFcn = 'divideind'; 
        net.divideParam.trainInd=trInd;
        net.divideParam.testInd=tstInd;
        net.divideParam.valInd=valInd; %For validation set
    % Choose a Performance Function
    net.performFcn = 'mae';
    %net.performParam.regularization = 0.9; %Set r for regularization
    % Train the Network
    [net,tr] = train(net,x,t);
    % Test the Network
    y = net(x);
    e = gsubtract(t,y);
    performance = perform(net,t,y);
    perf=[perf tr.perf];
    epoch=[epoch tr.epoch];
end

clear x_axis;
for i=1:(length(epoch))
    x_axis(i)=i;
end
plot(x_axis,perf);


